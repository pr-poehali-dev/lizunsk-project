import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

function Index() {
  const [lizcoin, setLizcoin] = useState(100);
  const [activeSection, setActiveSection] = useState('main');
  const [crosswordAnswers, setCrosswordAnswers] = useState<Record<string, string>>({});
  const [completedCrosswords, setCompletedCrosswords] = useState<string[]>([]);

  const crosswordWords = [
    { id: 'word1', clue: '–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞', answer: '–ª–∏–∑—É–Ω', length: 5 },
    { id: 'word2', clue: '–•–æ–ª–æ–¥–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', answer: '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', length: 9 },
    { id: 'word3', clue: '–§—Ä—É–∫—Ç–æ–≤—ã–π –ª–µ–¥', answer: '—Å–æ—Ä–±–µ—Ç', length: 6 },
    { id: 'word4', clue: '–ß–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è –æ–±—ä—è—Ç–∏–π', answer: '–ª–∞–¥–æ—à–∫–∞', length: 7 },
    { id: 'word5', clue: '–õ–µ—Ç–Ω–∏–π —Å—É–ø', answer: '–æ–∫—Ä–æ—à–∫–∞', length: 7 },
    { id: 'word6', clue: '–ü–µ–≤—á–∞—è –ø—Ç–∏—Ü–∞', answer: '—Å–æ–ª–æ–≤–µ–π', length: 7 },
    { id: 'word7', clue: '–ú–æ–ª–æ—á–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ', answer: '–∫–æ—Ä–æ–≤–∞', length: 6 },
    { id: 'word8', clue: '–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è', answer: '–ª–∏–∑–∞', length: 4 },
    { id: 'word9', clue: '–ì–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', answer: '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', length: 9 }
  ];

  const shopItems = [
    { id: 'passport', name: '–ü–∞—Å–ø–æ—Ä—Ç –õ–∏–∑—É–Ω—Å–∫–∞', price: 500, emoji: 'üìÑ' },
    { id: 'moon-passport', name: '–õ—É–Ω–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç', price: 50000, emoji: 'üåô', limited: true, stock: 2 },
    { id: 'signature', name: '–ü–æ–¥–ø–∏—Å—å –æ—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞', price: 2400, emoji: '‚úçÔ∏è' },
    { id: 'statue', name: '–§–∏–≥—É—Ä–∫–∞ —Å—Ç–∞—Ç—É–∏ –õ–∏–∑—ã –°–≤–æ–±–æ–¥—ã', price: 1800, emoji: 'üóΩ' }
  ];

  const checkCrosswordAnswer = (wordId: string, answer: string) => {
    const word = crosswordWords.find(w => w.id === wordId);
    if (word && answer.toLowerCase() === word.answer.toLowerCase()) {
      if (!completedCrosswords.includes(wordId)) {
        setLizcoin(prev => prev + 25);
        setCompletedCrosswords(prev => [...prev, wordId]);
      }
      return true;
    }
    return false;
  };

  const buyItem = (item: any) => {
    if (lizcoin >= item.price) {
      setLizcoin(prev => prev - item.price);
      alert(`–í—ã –∫—É–ø–∏–ª–∏ ${item.name}! üéâ`);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∑–∫–æ–∏–Ω–æ–≤! üí∞');
    }
  };

  const renderMainSection = () => (
    <div className="min-h-screen bg-gradient-to-br from-secondary to-background text-foreground">
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%239C92AC\" fill-opacity=\"0.1\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"4\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>
      
      <div className="relative z-10 container mx-auto px-4 py-8">
        <div className="text-center mb-12">
          <h1 className="text-6xl font-bold mb-4 gradient-text animate-fade-in">
            üç≠ –õ–ò–ó–£–ù–°–ö üç≠
          </h1>
          <p className="text-xl text-muted-foreground mb-8">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —Å–ª–∞–¥–∫–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!
          </p>
          
          <div className="flex justify-center items-center gap-4 mb-8">
            <Badge variant="outline" className="text-lg px-4 py-2 hover-scale">
              <Icon name="Coins" size={20} className="mr-2" />
              {lizcoin} –ª–∏–∑–∫–æ–∏–Ω–æ–≤
            </Badge>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[
            { id: 'history', title: '–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞', emoji: 'üìö', desc: '–£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –õ–∏–∑—É–Ω—Å–∫–∞' },
            { id: 'shop', title: '–ú–∞–≥–∞–∑–∏–Ω', emoji: 'üõí', desc: '–ü–æ–∫—É–ø–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –ª–∏–∑–∫–æ–∏–Ω—ã' },
            { id: 'attractions', title: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', emoji: 'üèõÔ∏è', desc: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –≥–æ—Ä–æ–¥–∞' },
            { id: 'quests', title: '–ö–≤–µ—Å—Ç—ã', emoji: 'üéØ', desc: '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ª–∏–∑–∫–æ–∏–Ω—ã –∑–∞ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥—ã' }
          ].map(section => (
            <Card 
              key={section.id}
              className="hover-scale cursor-pointer bg-card/80 backdrop-blur-sm border-2 hover:border-primary transition-all duration-300"
              onClick={() => setActiveSection(section.id)}
            >
              <CardHeader className="text-center">
                <div className="text-4xl mb-2">{section.emoji}</div>
                <CardTitle className="text-xl">{section.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-center text-muted-foreground">{section.desc}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );

  const renderHistorySection = () => (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-3xl">üìö –ò—Å—Ç–æ—Ä–∏—è –õ–∏–∑—É–Ω—Å–∫–∞</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p>
              –õ–∏–∑—É–Ω—Å–∫ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ –¥–∞–ª–µ–∫–æ–º 1847 –≥–æ–¥—É –≥—Ä—É–ø–ø–æ–π –º–æ—Ä–æ–∂–µ–Ω—â–∏–∫–æ–≤, –∏—Å–∫–∞–≤—à–∏—Ö –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ 
              –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º—ã—Ö –≤–∫—É—Å–Ω—ã—Ö –ª–∞–∫–æ–º—Å—Ç–≤ –≤ –º–∏—Ä–µ.
            </p>
            <p>
              –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–µ—Å—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ª–∏–∑—É–Ω–∞ - –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞, 
              –∫–æ—Ç–æ—Ä–æ–µ, —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Å—Ç–Ω—ã–º –ª–µ–≥–µ–Ω–¥–∞–º, –æ—Ö—Ä–∞–Ω—è–ª–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ.
            </p>
            <p>
              –°–µ–≥–æ–¥–Ω—è –õ–∏–∑—É–Ω—Å–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ —Å—Ç–æ–ª–∏—Ü–∞ —Å–ª–∞–¥–æ—Å—Ç–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –∂–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–æ–º 
              —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –∏ —Ç–µ–∫—Å—Ç—É—Ä.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderShopSection = () => (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-3xl">üõí –ú–∞–≥–∞–∑–∏–Ω –õ–∏–∑—É–Ω—Å–∫–∞</CardTitle>
            <p className="text-muted-foreground">
              –í–∞—à –±–∞–ª–∞–Ω—Å: <span className="text-primary font-bold">{lizcoin} –ª–∏–∑–∫–æ–∏–Ω–æ–≤</span>
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {shopItems.map(item => (
                <Card key={item.id} className="hover-scale border-2 hover:border-primary transition-all">
                  <CardHeader>
                    <div className="text-center">
                      <div className="text-4xl mb-2">{item.emoji}</div>
                      <CardTitle className="text-lg">{item.name}</CardTitle>
                      {item.limited && (
                        <Badge variant="destructive" className="mt-2">
                          –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ({item.stock} —à—Ç.)
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="text-center">
                    <p className="text-2xl font-bold text-primary mb-4">
                      {item.price.toLocaleString()} ü™ô
                    </p>
                    <Button 
                      onClick={() => buyItem(item)}
                      disabled={lizcoin < item.price}
                      className="w-full hover-scale"
                    >
                      –ö—É–ø–∏—Ç—å
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderAttractionsSection = () => (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-3xl">üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {[
                { name: '–°—Ç–∞—Ç—É—è –õ–∏–∑—ã –°–≤–æ–±–æ–¥—ã', emoji: 'üóΩ', desc: '–ì–ª–∞–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –≥–æ—Ä–æ–¥–∞, –¥–µ—Ä–∂–∞—â–∏–π —Ä–æ–∂–æ–∫ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ' },
                { name: '–ú—É–∑–µ–π –ú–æ—Ä–æ–∂–µ–Ω–æ–≥–æ', emoji: 'üç¶', desc: '–ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤' },
                { name: '–ü–∞—Ä–∫ –°–ª–∞–¥–∫–∏—Ö –ì—Ä–µ–∑', emoji: 'üå∏', desc: '–ú–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞ —Å —Ñ–æ–Ω—Ç–∞–Ω–∞–º–∏ –∏–∑ —Å–∏—Ä–æ–ø–∞' },
                { name: '–ú–æ—Å—Ç –õ–∏–∑—É–Ω–æ–≤', emoji: 'üåâ', desc: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ—Å—Ç –≤ —Ñ–æ—Ä–º–µ —Ä–∞—Å—Ç—è–Ω—É—Ç–æ–≥–æ –ª–∏–∑—É–Ω–∞' }
              ].map(attraction => (
                <Card key={attraction.name} className="hover-scale">
                  <CardHeader>
                    <div className="text-center">
                      <div className="text-4xl mb-2">{attraction.emoji}</div>
                      <CardTitle>{attraction.name}</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-center text-muted-foreground">{attraction.desc}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderQuestsSection = () => (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-3xl">üéØ –ö—Ä–æ—Å—Å–≤–æ—Ä–¥—ã</CardTitle>
            <p className="text-muted-foreground">
              –†–µ—à–∞–π—Ç–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 25 –ª–∏–∑–∫–æ–∏–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {crosswordWords.map(word => (
                <Card 
                  key={word.id} 
                  className={`hover-scale ${completedCrosswords.includes(word.id) ? 'border-green-500 bg-green-50 dark:bg-green-900/20' : ''}`}
                >
                  <CardHeader>
                    <CardTitle className="text-lg">
                      {completedCrosswords.includes(word.id) ? '‚úÖ' : '‚ùì'} –°–ª–æ–≤–æ {word.length} –±—É–∫–≤
                    </CardTitle>
                    <p className="text-muted-foreground">{word.clue}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="flex gap-2">
                      <Input
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                        value={crosswordAnswers[word.id] || ''}
                        onChange={(e) => setCrosswordAnswers(prev => ({
                          ...prev,
                          [word.id]: e.target.value
                        }))}
                        disabled={completedCrosswords.includes(word.id)}
                      />
                      <Button
                        onClick={() => checkCrosswordAnswer(word.id, crosswordAnswers[word.id] || '')}
                        disabled={completedCrosswords.includes(word.id)}
                        className="hover-scale"
                      >
                        {completedCrosswords.includes(word.id) ? '‚úÖ' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                      </Button>
                    </div>
                    {completedCrosswords.includes(word.id) && (
                      <Badge variant="default" className="mt-2">
                        +25 –ª–∏–∑–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ!
                      </Badge>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-background dark">
      {activeSection === 'main' && renderMainSection()}
      {activeSection === 'history' && renderHistorySection()}
      {activeSection === 'shop' && renderShopSection()}
      {activeSection === 'attractions' && renderAttractionsSection()}
      {activeSection === 'quests' && renderQuestsSection()}
    </div>
  );
}

export default Index;