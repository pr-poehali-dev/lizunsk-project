import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

function Index() {
  const [lizcoin, setLizcoin] = useState(100);
  const [activeSection, setActiveSection] = useState('main');
  const [crosswordAnswers, setCrosswordAnswers] = useState<Record<string, string>>({});
  const [completedCrosswords, setCompletedCrosswords] = useState<string[]>([]);
  
  // Game state
  const [gameLevel, setGameLevel] = useState(1);
  const [playerPosition, setPlayerPosition] = useState(50);
  const [gameRunning, setGameRunning] = useState(false);
  const [coins, setCoins] = useState([200, 400, 600]);
  const [completedLevels, setCompletedLevels] = useState<number[]>([]);

  const regions = {
    '–°—É–±–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –æ–±–ª–∞—Å—Ç—å': ['–õ–∏–∑—É–Ω—Å–∫ –≥–æ—Ä–æ–¥', '–ì–æ—Ç–æ–≤—Å–∫', '–≠–º–æ–≤—Å–∫', '–ü–∞–Ω–∫–≤—Å–∫'],
    '–ú—É—Ö–æ—Å—Ä–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ú—É—Ö–æ—Å—Ä–∞–Ω—Å–∫', '–ù–∏–∂–Ω–∏–π –õ–∏–∑—É–Ω—Å–∫'],
    '–õ–∏–∑—É–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': ['–ö–∞—Ä—Ç—ç–ª—å—Å–∫', '–ù–∏–∫—Ç–æ–≤—Å–∫', '–ü–µ–Ω–µ–≤—Å–∫']
  };

  const crosswordWords = [
    { id: 'word1', clue: '–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω—ã', answer: '–ª–∏–∑—É–Ω', length: 5 },
    { id: 'word2', clue: '–•–æ–ª–æ–¥–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', answer: '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', length: 9 },
    { id: 'word3', clue: '–§—Ä—É–∫—Ç–æ–≤—ã–π –ª–µ–¥', answer: '—Å–æ—Ä–±–µ—Ç', length: 6 },
    { id: 'word4', clue: '–ß–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è –æ–±—ä—è—Ç–∏–π', answer: '–ª–∞–¥–æ—à–∫–∞', length: 7 },
    { id: 'word5', clue: '–õ–µ—Ç–Ω–∏–π —Å—É–ø', answer: '–æ–∫—Ä–æ—à–∫–∞', length: 7 },
    { id: 'word6', clue: '–ü–µ–≤—á–∞—è –ø—Ç–∏—Ü–∞', answer: '—Å–æ–ª–æ–≤–µ–π', length: 7 },
    { id: 'word7', clue: '–ú–æ–ª–æ—á–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ', answer: '–∫–æ—Ä–æ–≤–∞', length: 6 },
    { id: 'word8', clue: '–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è', answer: '–ª–∏–∑–∞', length: 4 },
    { id: 'word9', clue: '–ì–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', answer: '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', length: 9 }
  ];

  const shopItems = [
    { id: 'passport', name: '–ü–∞—Å–ø–æ—Ä—Ç –õ–∏–∑—É–Ω—Å–∫–∞', price: 500, emoji: 'üìÑ' },
    { id: 'moon-passport', name: '–õ—É–Ω–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç', price: 50000, emoji: 'üåô', limited: true, stock: 2 },
    { id: 'signature', name: '–ü–æ–¥–ø–∏—Å—å –æ—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞', price: 2400, emoji: '‚úçÔ∏è' },
    { id: 'statue', name: '–§–∏–≥—É—Ä–∫–∞ —Å—Ç–∞—Ç—É–∏ –õ–∏–∑—ã –°–≤–æ–±–æ–¥—ã', price: 1800, emoji: 'üóΩ' }
  ];

  // Game controls
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (!gameRunning) return;
      
      if (e.key === 'ArrowLeft' && playerPosition > 0) {
        setPlayerPosition(prev => Math.max(0, prev - 10));
      } else if (e.key === 'ArrowRight' && playerPosition < 700) {
        setPlayerPosition(prev => Math.min(700, prev + 10));
      }
      
      // Check coin collection
      coins.forEach((coinPos, index) => {
        if (Math.abs(playerPosition - coinPos) < 30) {
          setLizcoin(prev => prev + 50);
          setCoins(prev => prev.filter((_, i) => i !== index));
        }
      });
      
      // Check level completion
      if (playerPosition >= 680) {
        setGameRunning(false);
        if (!completedLevels.includes(gameLevel)) {
          setLizcoin(prev => prev + 100);
          setCompletedLevels(prev => [...prev, gameLevel]);
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [gameRunning, playerPosition, coins, gameLevel, completedLevels]);

  const startGame = (level: number) => {
    setGameLevel(level);
    setPlayerPosition(50);
    setGameRunning(true);
    setCoins([200, 400, 600]);
  };

  const checkCrosswordAnswer = (wordId: string, answer: string) => {
    const word = crosswordWords.find(w => w.id === wordId);
    if (word && answer.toLowerCase() === word.answer.toLowerCase()) {
      if (!completedCrosswords.includes(wordId)) {
        setLizcoin(prev => prev + 25);
        setCompletedCrosswords(prev => [...prev, wordId]);
      }
      return true;
    }
    return false;
  };

  const buyItem = (item: any) => {
    if (lizcoin >= item.price) {
      setLizcoin(prev => prev - item.price);
      alert(`–í—ã –∫—É–ø–∏–ª–∏ ${item.name}! üéâ`);
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∑–∫–æ–∏–Ω–æ–≤! üí∞');
    }
  };

  const renderMainSection = () => (
    <div className="min-h-screen bg-gradient-to-br from-background via-card to-background text-foreground relative overflow-hidden cyber-grid">
      <div className="absolute inset-0 bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 opacity-50"></div>
      
      <div className="relative z-10 container mx-auto px-4 py-8">
        <div className="text-center mb-12">
          <h1 className="text-7xl font-bold mb-4 gradient-text animate-fade-in neon-glow">
            –õ–ò–ó–£–ù–°–ö
          </h1>
          <p className="text-2xl text-muted-foreground mb-2">
            –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –°—Ç—Ä–∞–Ω–∞ –ë—É–¥—É—â–µ–≥–æ
          </p>
          <p className="text-lg text-muted-foreground mb-8">
            –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏
          </p>
          
          <div className="flex justify-center items-center gap-4 mb-8">
            <Badge variant="outline" className="text-lg px-6 py-3 hover-scale glass-effect neon-glow">
              <Icon name="Coins" size={24} className="mr-2 text-primary" />
              <span className="gradient-text font-bold">{lizcoin}</span> –ª–∏–∑–∫–æ–∏–Ω–æ–≤
            </Badge>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {[
            { id: 'history', title: '–ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∞–Ω—ã', emoji: 'üåå', desc: '–£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏' },
            { id: 'shop', title: '–ú–∞–≥–∞–∑–∏–Ω', emoji: 'üõ∏', desc: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –ª–∏–∑–∫–æ–∏–Ω—ã' },
            { id: 'attractions', title: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', emoji: 'üèõÔ∏è', desc: '–ú–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏' },
            { id: 'quests', title: '–ö–≤–µ—Å—Ç—ã', emoji: '‚ö°', desc: '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ' }
          ].map(section => (
            <Card 
              key={section.id}
              className="hover-scale cursor-pointer glass-effect neon-glow border-2 hover:border-primary transition-all duration-300"
              onClick={() => setActiveSection(section.id)}
            >
              <CardHeader className="text-center">
                <div className="text-4xl mb-2">{section.emoji}</div>
                <CardTitle className="text-xl gradient-text">{section.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-center text-muted-foreground">{section.desc}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <Card className="glass-effect neon-glow">
            <CardHeader>
              <CardTitle className="gradient-text">üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º</CardTitle>
            </CardHeader>
            <CardContent>
              <Button 
                onClick={() => setActiveSection('cities')} 
                className="w-full hover-scale neon-glow"
                variant="outline"
              >
                –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞
              </Button>
            </CardContent>
          </Card>

          <Card className="glass-effect neon-glow">
            <CardHeader>
              <CardTitle className="gradient-text">üéÆ –õ–∏–∑—É–Ω-–ú–∞—Ä–∏–æ</CardTitle>
            </CardHeader>
            <CardContent>
              <Button 
                onClick={() => setActiveSection('game')} 
                className="w-full hover-scale neon-glow"
                variant="outline"
              >
                –ò–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  const renderCitiesSection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">üèôÔ∏è –ì–æ—Ä–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –õ–∏–∑—É–Ω—Å–∫</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              {Object.entries(regions).map(([region, cities]) => (
                <div key={region}>
                  <h3 className="text-2xl font-bold mb-4 text-secondary">{region}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {cities.map(city => (
                      <Card key={city} className="hover-scale glass-effect border-primary/30">
                        <CardHeader className="text-center">
                          <CardTitle className="text-lg gradient-text">{city}</CardTitle>
                        </CardHeader>
                        <CardContent className="text-center">
                          <div className="text-3xl mb-2">üåÉ</div>
                          <p className="text-sm text-muted-foreground">
                            –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–µ–≥–∞–ø–æ–ª–∏—Å
                          </p>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderGameSection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">üéÆ –õ–∏–∑—É–Ω-–ú–∞—Ä–∏–æ: –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ</CardTitle>
            <p className="text-muted-foreground">
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è. –°–æ–±–∏—Ä–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ñ–∏–Ω–∏—à–∞!
            </p>
          </CardHeader>
          <CardContent>
            {!gameRunning ? (
              <div className="space-y-4">
                <div className="text-center mb-6">
                  <p className="text-lg mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:</p>
                  <div className="flex gap-4 justify-center">
                    {[1, 2, 3].map(level => (
                      <Button
                        key={level}
                        onClick={() => startGame(level)}
                        className={`hover-scale neon-glow ${completedLevels.includes(level) ? 'bg-green-600' : ''}`}
                        variant="outline"
                      >
                        {completedLevels.includes(level) ? '‚úÖ' : 'üéØ'} –£—Ä–æ–≤–µ–Ω—å {level}
                        {completedLevels.includes(level) && <span className="ml-2 text-xs">(+100 ü™ô)</span>}
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="text-center mb-4">
                  <Badge className="text-lg px-4 py-2 neon-glow">
                    –£—Ä–æ–≤–µ–Ω—å {gameLevel} | –°–æ–±—Ä–∞–Ω–æ: {3 - coins.length}/3 –º–æ–Ω–µ—Ç
                  </Badge>
                </div>
                
                <div className="relative w-full h-32 bg-gradient-to-r from-card to-muted rounded-lg border-2 border-primary overflow-hidden">
                  {/* Player */}
                  <div 
                    className="absolute bottom-2 w-8 h-8 bg-primary rounded-full transition-all duration-100 shadow-lg"
                    style={{ left: `${playerPosition}px` }}
                  >
                    ü§ñ
                  </div>
                  
                  {/* Coins */}
                  {coins.map((pos, index) => (
                    <div 
                      key={index}
                      className="absolute bottom-12 w-6 h-6 bg-yellow-400 rounded-full animate-bounce"
                      style={{ left: `${pos}px` }}
                    >
                      ü™ô
                    </div>
                  ))}
                  
                  {/* Finish line */}
                  <div className="absolute right-2 top-0 bottom-0 w-4 bg-gradient-to-t from-green-400 to-green-600 rounded">
                    üèÅ
                  </div>
                </div>
                
                <div className="text-center">
                  <Button 
                    onClick={() => setGameRunning(false)}
                    variant="outline"
                    className="hover-scale"
                  >
                    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderHistorySection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">üåå –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∞–Ω—ã –õ–∏–∑—É–Ω—Å–∫</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p>
              –í –¥–∞–ª–µ–∫–æ–º 3030 –≥–æ–¥—É, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –æ—Å–≤–æ–∏–ª–æ –≥–∏–ø–µ—Ä-–≤–∞—Ä–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ 
              –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –õ–∏–∑—É–Ω—Å–∫ - –ø–µ—Ä–≤–∞—è –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω–∞—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—è–º.
            </p>
            <p>
              –°—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–µ—Å—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –∫–∏–±–µ—Ä–ª–∏–∑—É–Ω–∞ - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞, 
              –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Ö—Ä–æ–Ω–∏–∫–∞–º, –æ—Ö—Ä–∞–Ω—è–ª–æ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ.
            </p>
            <p>
              –°–µ–≥–æ–¥–Ω—è –õ–∏–∑—É–Ω—Å–∫ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–æ–º –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–ª–∞–¥–æ—Å—Ç—è–º–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π –∂–∏—Ç–µ–ª—å - 
              –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∫—É—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –±—É–¥—É—â–µ–≥–æ.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderShopSection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">üõ∏ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω</CardTitle>
            <p className="text-muted-foreground">
              –í–∞—à –±–∞–ª–∞–Ω—Å: <span className="text-primary font-bold gradient-text">{lizcoin} –ª–∏–∑–∫–æ–∏–Ω–æ–≤</span>
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {shopItems.map(item => (
                <Card key={item.id} className="hover-scale glass-effect border-2 hover:border-primary transition-all neon-glow">
                  <CardHeader>
                    <div className="text-center">
                      <div className="text-4xl mb-2">{item.emoji}</div>
                      <CardTitle className="text-lg gradient-text">{item.name}</CardTitle>
                      {item.limited && (
                        <Badge variant="destructive" className="mt-2 neon-glow">
                          –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ({item.stock} —à—Ç.)
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="text-center">
                    <p className="text-2xl font-bold gradient-text mb-4">
                      {item.price.toLocaleString()} ü™ô
                    </p>
                    <Button 
                      onClick={() => buyItem(item)}
                      disabled={lizcoin < item.price}
                      className="w-full hover-scale neon-glow"
                    >
                      –ö—É–ø–∏—Ç—å
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderAttractionsSection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">üèõÔ∏è –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {[
                { name: '–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—É—è –õ–∏–∑—ã –°–≤–æ–±–æ–¥—ã', emoji: 'üóΩ', desc: '–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª –≥–∞–ª–∞–∫—Ç–∏–∫–∏ —Å –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º —Ä–æ–∂–∫–æ–º' },
                { name: '–ú—É–∑–µ–π –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–≥–æ –ú–æ—Ä–æ–∂–µ–Ω–æ–≥–æ', emoji: 'üç¶', desc: '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤' },
                { name: '–ü–∞—Ä–∫ –ö–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ì—Ä–µ–∑', emoji: 'üåå', desc: '–ù–µ–≤–µ—Å–æ–º—ã–π –ø–∞—Ä–∫ —Å —Ñ–æ–Ω—Ç–∞–Ω–∞–º–∏ –∏–∑ –∂–∏–¥–∫–æ–≥–æ –∞–∑–æ—Ç–∞' },
                { name: '–ú–æ—Å—Ç –ü–ª–∞–∑–º–µ–Ω–Ω—ã—Ö –õ–∏–∑—É–Ω–æ–≤', emoji: 'üåâ', desc: '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –º–æ—Å—Ç –º–µ–∂–¥—É –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏' }
              ].map(attraction => (
                <Card key={attraction.name} className="hover-scale glass-effect neon-glow">
                  <CardHeader>
                    <div className="text-center">
                      <div className="text-4xl mb-2">{attraction.emoji}</div>
                      <CardTitle className="gradient-text">{attraction.name}</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-center text-muted-foreground">{attraction.desc}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderQuestsSection = () => (
    <div className="min-h-screen bg-background cyber-grid">
      <div className="container mx-auto px-4 py-8">
        <Button 
          onClick={() => setActiveSection('main')} 
          className="mb-6 hover-scale neon-glow"
          variant="outline"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        
        <Card className="mb-6 glass-effect neon-glow">
          <CardHeader>
            <CardTitle className="text-3xl gradient-text">‚ö° –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥—ã</CardTitle>
            <p className="text-muted-foreground">
              –†–µ—à–∞–π—Ç–µ –∫–∏–±–µ—Ä–∑–∞–≥–∞–¥–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 25 –ª–∏–∑–∫–æ–∏–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {crosswordWords.map(word => (
                <Card 
                  key={word.id} 
                  className={`hover-scale glass-effect neon-glow ${completedCrosswords.includes(word.id) ? 'border-green-500 bg-green-900/20' : ''}`}
                >
                  <CardHeader>
                    <CardTitle className="text-lg gradient-text">
                      {completedCrosswords.includes(word.id) ? '‚úÖ' : 'üîÆ'} –°–ª–æ–≤–æ {word.length} –±—É–∫–≤
                    </CardTitle>
                    <p className="text-muted-foreground">{word.clue}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="flex gap-2">
                      <Input
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                        value={crosswordAnswers[word.id] || ''}
                        onChange={(e) => setCrosswordAnswers(prev => ({
                          ...prev,
                          [word.id]: e.target.value
                        }))}
                        disabled={completedCrosswords.includes(word.id)}
                        className="glass-effect"
                      />
                      <Button
                        onClick={() => checkCrosswordAnswer(word.id, crosswordAnswers[word.id] || '')}
                        disabled={completedCrosswords.includes(word.id)}
                        className="hover-scale neon-glow"
                      >
                        {completedCrosswords.includes(word.id) ? '‚úÖ' : 'üîç'}
                      </Button>
                    </div>
                    {completedCrosswords.includes(word.id) && (
                      <Badge variant="default" className="mt-2 neon-glow">
                        +25 –ª–∏–∑–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ!
                      </Badge>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-background dark">
      {activeSection === 'main' && renderMainSection()}
      {activeSection === 'cities' && renderCitiesSection()}
      {activeSection === 'game' && renderGameSection()}
      {activeSection === 'history' && renderHistorySection()}
      {activeSection === 'shop' && renderShopSection()}
      {activeSection === 'attractions' && renderAttractionsSection()}
      {activeSection === 'quests' && renderQuestsSection()}
    </div>
  );
}

export default Index;